#=====================================================================================
# Description:   Build OpenWrt and ImmortalWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#=====================================================================================
name: Generate RTA-WRT Firmware

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select device target:"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "latest"
        type: choice
        options:
          - snapshots
          - latest
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean
      squashfs:
        description: "Generate squashfs image"
        required: false
        default: "false"
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      upload-artifacts:
        description: "Upload as artifacts only"
        required: false
        default: "false"
        type: boolean

env:
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
             echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64']" >> $GITHUB_OUTPUT
          else
             echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
        

  Generate:
    needs: prebuild
    runs-on: ubuntu-latest
    name: "${{ matrix.target }}"
    
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:      
      - name: Initialization System Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs zstd
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "PROFILE=rpi-3" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2710" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2710" >> $GITHUB_ENV
            TARGET_NAME="bcm27xx-bcm2710"
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a53" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "PROFILE=rpi-4" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=bcm27xx/bcm2711" >> $GITHUB_ENV
            echo "TARGET_NAME=bcm27xx-bcm2711" >> $GITHUB_ENV
            TARGET_NAME="bcm27xx-bcm2711"
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_cortex-a72" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2C" ]; then
            echo "PROFILE=friendlyarm_nanopi-r2c" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R2S" ]; then
            echo "PROFILE=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "NanoPi R4S" ]; then
            echo "PROFILE=friendlyarm_nanopi-r4s" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus" ]; then
            echo "PROFILE=xunlong_orangepi-r1-plus" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "Orange Pi R1 Plus LTS" ]; then
            echo "PROFILE=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=rockchip/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=rockchip-armv8" >> $GITHUB_ENV
            TARGET_NAME="rockchip-armv8"
            echo "ARCH_1=armv8" >> $GITHUB_ENV
            echo "ARCH_2=aarch64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$TARGET" == "x86-64" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=x86/64" >> $GITHUB_ENV
            echo "TARGET_NAME=x86-64" >> $GITHUB_ENV
            TARGET_NAME="x86-64"
            echo "ARCH_1=amd64" >> $GITHUB_ENV
            echo "ARCH_2=x86_64" >> $GITHUB_ENV
            echo "ARCH_3=x86_64" >> $GITHUB_ENV
          fi
          echo "WORKING_DIR=openwrt-imagebuilder-"$TARGET_NAME".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.openwrt.org" >> $GITHUB_ENV
          echo "BASE=openwrt" >> $GITHUB_ENV
          openwrt_page=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/openwrt/openwrt/releases/latest)
          if [ "$RELEASE_BRANCH" == "snapshots" ]; then
            latest_tag=snapshots
          else
            latest_tag=$(echo "$openwrt_page" | grep -oP 'v[0-9.]+' | sed 's/^v//')
          fi
          echo "BRANCH=${latest_tag}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          path: origin

      - name: Create Release
        if: github.event.inputs.upload-artifacts == 'false' && github.event.inputs.upload-prerelease == 'false'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH }}-${{ env.DATE }}
          name: "‚åõ RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          target_commitish: ${{ github.ref_name }}
          prerelease: ${{ env.PRE_RELEASE }}
          make_latest: true
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.BRANCH }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATE }}

            **STATUS : ON BUILD ‚åõÔ∏è**

            [CHANGELOG](https://github.com/rtaserver/RTA-WRT/blob/main/CHANGELOG.md)
            
            Detail Firmware:
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)
          generate_release_notes: true

      - name: Create Pre-Release
        if: github.event.inputs.upload-prerelease == 'true'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OpenWrt_Prerelease
          name: "üîî RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }} - Pre Release"
          target_commitish: ${{ github.ref_name }}
          prerelease: true
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/OpenWrt_Prerelease/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATE }}

            **STATUS : ON BUILD ‚åõÔ∏è**

            [CHANGELOG](https://github.com/rtaserver/RTA-WRT/blob/main/CHANGELOG.md)
            
            Detail Firmware:
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)

      - name: Download Image Builder
        id: download
        run: |
          if [ "$BRANCH" == "snapshots" ]; then
            SNAPSHOTS="$DOWNLOAD_BASE/snapshots/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$TARGET_NAME.Linux-x86_64.tar.zst"
            wget -nv "$SNAPSHOTS"
            tar -xvf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.zst && mv *-imagebuilder-* $WORKING_DIR && sync
          else
            RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
            wget -nv "$RELEASE"
            tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          fi
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/external-package-urls.sh
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/misc.sh
          bash scripts/tunnel_app.sh
          bash scripts/clash-core.sh
          echo "Total custom packages: $(find packages -type f -name "*.ipk" | wc -l)"
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
          time bash make-build.sh $PROFILE
          rm -rf bin/targets/"$TARGET_SYSTEM"/*.{json,manifest,bin,*-rootfs*,*factory*,sha256sums}
          for file in bin/targets/"$TARGET_SYSTEM"/*-"$TARGET_NAME"-*.img.gz; do mv "$file" compiled_images/RTA-WRT_$(basename "$file" .img.gz).img.gz; done
          # Check File
          ls -l
          # Replace Name
          search_replace_patterns=(
              "bcm27xx-bcm2710-rpi-3|Raspberry-Pi-3_ext4-sysupgrade"
              "bcm27xx-bcm2711-rpi-4|Raspberry-Pi-4_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r2c|NanoPi_R2C_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r2s|NanoPi_R2S_ext4-sysupgrade"
              "rockchip-armv8-friendlyarm_nanopi-r4s|NanoPi_R4S_ext4-sysupgrade"
              "rockchip-armv8-xunlong_orangepi-r1-plus|Orange-Pi-R1_ext4-sysupgrade"
              "rockchip-armv8-xunlong_orangepi-r1-plus-lts|Orange-Pi-R1-Plus-LTS_ext4-sysupgrade"
              "x86-64-generic-ext4-combined-efi|x86-64-Generic_ext4-combined-efi"
              "x86-64-generic-ext4-combined|x86-64-Generic_ext4-combined"
          )

          for pattern in "${search_replace_patterns[@]}"; do
              search="${pattern%%|*}"
              replace="${pattern##*|}"

              for file in compiled_images/*${search}*.img.gz; do
                  if [[ -f "$file" ]]; then
                      new_name="RTA-WRT_OpenWrt-${{ env.BRANCH }}_${replace}.img.gz"
                      echo "Renaming: $file -> $new_name"
                      mv "$file" "compiled_images/$new_name"
                  fi
              done
          done
          ls -l compiled_images
          echo "RELEASE_TAG=$PROFILE-$BASE-$BRANCH-$DATEMONTH" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Upload All Firmware to Artifacts
        if: github.event.inputs.upload-artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.WORKING_DIR }}/compiled_images//*

      - name: Add changelog info to new release description
        if: github.event.inputs.upload-artifacts == 'false'
        id: changelog
        shell: bash
        run: |
          cd $WORKING_DIR
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' CHANGELOG.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT

      - name: Upload Firmware to Release
        if: github.event.inputs.upload-artifacts == 'false' && github.event.inputs.upload-prerelease == 'false'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.WORKING_DIR }}/compiled_images//*
          tag_name: ${{ env.BRANCH }}-${{ env.DATE }}
          name: "‚úÖ RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/${{ env.BRANCH }}-${{ env.DATE }}/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATE }}

            **STATUS : DONE ‚òëÔ∏è**

            [CHANGELOG](https://github.com/rtaserver/RTA-WRT/blob/main/CHANGELOG.md)
            
            Detail Firmware:
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)

      - name: Upload Firmware to Pre-Release
        if: github.event.inputs.upload-prerelease == 'true'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.WORKING_DIR }}/compiled_images//*
          tag_name: OpenWrt_Prerelease
          name: "üîî RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }} - Pre Release"
          body: |
            ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/rtaserver/RTA-WRT/OpenWrt_Prerelease/total?style=for-the-badge&logo=Openwrt)

            ### RTA-WRT OpenWrt ${{ env.BRANCH }} Image information
            Build date: ${{ env.DATE }}

            **STATUS : DONE ‚òëÔ∏è**

            [CHANGELOG](https://github.com/rtaserver/RTA-WRT/blob/main/CHANGELOG.md)
            
            Detail Firmware:
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: rtawrt
            - Default WIFI name: RTA-WRT_2g | RTA-WRT_5g (if device supported)

  notify:
    needs: Generate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get current time
        id: current_time
        run: echo "CURRENT_TIME=$(TZ=Asia/Jakarta date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Notify Telegram Release
        if: github.event.inputs.upload-artifacts == 'false' && github.event.inputs.upload-prerelease == 'false'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          RELEASE_TAG: "${{ env.BRANCH }}-${{ env.DATE }}"
          RELEASE_NAME: "‚úÖ RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }}"
          CURRENT_TIME: ${{ env.CURRENT_TIME }}
        run: |
          MESSAGE=$(cat <<-EOF
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
                           NEW UPDATE
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
          NAME    : \`${RELEASE_NAME}\`
          TAG       : \`${RELEASE_TAG}\`
          DATE    : \`${CURRENT_TIME}\`
          REPO    : \`rtaserver/RTA-WRT\`
          URL       : [Click Here](https://github.com/rtaserver/RTA-WRT/releases/tag/${RELEASE_TAG})
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
          EOF
          )
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
          -d chat_id=$CHAT_ID \
          -d parse_mode=Markdown \
          -d text="$MESSAGE"

      - name: Notify Telegram Pre-Release
        if: github.event.inputs.upload-prerelease == 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          RELEASE_TAG: "OpenWrt_Prerelease"
          RELEASE_NAME: "üîî RTA-WRT OpenWrt ${{ env.BRANCH }} : ${{ env.DATE }} - Pre Release"
          CURRENT_TIME: ${{ env.CURRENT_TIME }}
        run: |
          MESSAGE=$(cat <<-EOF
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
                           NEW UPDATE
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
          NAME    : \`${RELEASE_NAME}\`
          TAG       : \`${RELEASE_TAG}\`
          DATE    : \`${CURRENT_TIME}\`
          REPO    : \`rtaserver/RTA-WRT\`
          URL       : [Click Here](https://github.com/rtaserver/RTA-WRT/releases/tag/${RELEASE_TAG})
          ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
          EOF
          )
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
          -d chat_id=$CHAT_ID \
          -d parse_mode=Markdown \
          -d text="$MESSAGE"
